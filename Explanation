<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Temporal Verification of Prime Numbers: A Computational Perspective</title>
    <!-- MathJax for rendering LaTeX equations -->
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    <script>
        // MathJax configuration for inline and display LaTeX
        window.MathJax = {
            tex: {
                inlineMath: [['$', '$'], ['\\(', '\\)']], // For inline LaTeX
                displayMath: [['$$', '$$'], ['\\[', '\\]']], // For display LaTeX
                processEscapes: true // Allows for escaped dollar signs in text
            },
            options: {
                // Simplified rendering to avoid recursive loops
                renderActions: {
                    addMenu: [0, '', ''],
                    checkErrors: [200, function (doc) { doc.checkErrors(); }, '']
                },
                skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code'],
                ignoreHtmlClass: 'tex2jax_ignore'
            }
        };
    </script>
    <!-- Tailwind CSS CDN for modern styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom CSS for a modern, clean, and responsive design */
        body {
            font-family: 'Inter', sans-serif; /* Modern sans-serif font */
            line-height: 1.8; /* Improved readability */
            color: #1a202c; /* Dark text for contrast */
            background: linear-gradient(135deg, #f0f4f8 0%, #d9e2ec 100%); /* Soft gradient background */
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: flex-start; /* Align content to the top */
            padding: 20px 0; /* Add some vertical padding */
        }
        .container {
            max-width: 1000px; /* Slightly narrower for better line length */
            margin: 0 auto;
            padding: 30px;
            background: white; /* White background for the main content block */
            border-radius: 16px; /* More rounded corners */
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1); /* Deeper shadow for main container */
            display: flex;
            flex-direction: column;
            gap: 30px; /* Space between sections */
        }
        .header {
            text-align: center;
            padding: 40px;
            background: linear-gradient(45deg, #4c51bf 0%, #667eea 100%); /* Blue gradient header */
            color: white;
            border-radius: 12px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);
            margin-bottom: 40px; /* Separate header from first section */
        }
        .header h1 {
            font-size: 2.5em; /* Adjusted font size */
            margin-bottom: 10px;
            font-weight: 700;
            letter-spacing: -0.8px;
            line-height: 1.2;
        }
        .header .subtitle {
            font-size: 1.2em;
            font-style: italic;
            opacity: 0.9;
            margin-bottom: 20px;
        }
        .header .abstract {
            font-size: 1em;
            color: #e2e8f0; /* Lighter text for abstract */
            max-width: 700px;
            margin: 0 auto;
            text-align: left;
            background: rgba(255, 255, 255, 0.1); /* Slightly transparent white background */
            padding: 20px;
            border-radius: 10px;
            border-left: 4px solid #81e6d9; /* Teal accent border */
            line-height: 1.6;
        }
        .section {
            background: white;
            border-radius: 12px;
            padding: 35px;
            box-shadow: 0 3px 12px rgba(0, 0, 0, 0.05);
            border-left: 5px solid #cbd5e0; /* Subtle light gray border */
        }
        .section.critical {
            border-left-color: #f56565; /* Red border for critical insights */
            background: linear-gradient(135deg, #fff5f5 0%, #ffffff 100%); /* Light red gradient */
        }
        .section.theorem {
            border-left-color: #48bb78; /* Green border for theorems/theses */
            background: linear-gradient(135deg, #f0fff4 0%, #ffffff 100%); /* Light green gradient */
        }
        .section h2 {
            color: #2d3748;
            margin-bottom: 25px;
            font-size: 1.8em;
            font-weight: 600;
            letter-spacing: -0.2px;
            border-bottom: 1px solid #edf2f7; /* Underline for section titles */
            padding-bottom: 15px;
        }
        .section h3 {
            color: #4a5568;
            margin: 25px 0 15px 0;
            font-size: 1.3em;
            font-weight: 600;
        }
        .section p {
            font-size: 1.05em;
            margin-bottom: 16px;
            text-align: justify;
        }
        .equation-block {
            background: #f8f9fa;
            border: 1px solid #e2e8f0;
            border-radius: 10px;
            padding: 28px;
            margin: 30px 0;
            text-align: center;
            position: relative;
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05); /* Inner shadow for depth */
        }
        .equation-block::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 5px;
            background: #6366f1; /* Indigo accent bar */
            border-radius: 8px 0 0 8px;
        }
        .equation-label {
            font-weight: 600;
            color: #2d3748;
            margin-bottom: 12px;
            font-size: 1em;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            color: #5a67d8; /* Brighter blue for label */
        }
        .insight-box, .theorem-box {
            border-radius: 12px;
            padding: 25px;
            margin: 25px 0;
            position: relative;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        }
        .insight-box {
            background: linear-gradient(135deg, #fffaf0 0%, #ffeecb 100%); /* Light amber gradient */
            border: 2px solid #ed8936; /* Amber border */
        }
        .insight-box::before {
            content: "💡";
            position: absolute;
            top: -18px;
            left: 25px;
            background: #f6ad55; /* Darker amber for icon background */
            color: white;
            padding: 6px 12px;
            border-radius: 50%;
            font-weight: bold;
            font-size: 1.3em;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
        }
        .insight-box h4 {
            color: #c05621;
            margin-bottom: 12px;
            font-size: 1.15em;
            margin-top: 8px;
        }
        .theorem-box {
            background: linear-gradient(135deg, #f0fff4 0%, #e0ffe0 100%); /* Light green gradient */
            border: 2px solid #48bb78; /* Green border */
        }
        .theorem-box::before {
            content: "✔"; /* Checkmark icon */
            position: absolute;
            top: -18px;
            left: 25px;
            background: #38a169; /* Darker green for icon background */
            color: white;
            padding: 6px 12px;
            border-radius: 50%;
            font-weight: bold;
            font-size: 1.3em;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
        }
        .interactive-demo {
            background: #2d3748; /* Dark background for demo */
            color: white;
            border-radius: 12px;
            padding: 40px;
            margin-top: 30px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        .demo-header {
            text-align: center;
            margin-bottom: 30px;
            width: 100%;
        }
        .demo-header h2 {
            color: white;
            margin-bottom: 10px;
            font-size: 2em;
            font-weight: 700;
        }
        .demo-header p {
            color: #cbd5e0; /* Lighter text for demo description */
            font-size: 1em;
            line-height: 1.5;
        }
        .demo-controls {
            display: flex;
            gap: 20px;
            margin-bottom: 30px;
            flex-wrap: wrap;
            justify-content: center;
            align-items: center;
            width: 100%;
        }
        .demo-controls input {
            padding: 12px 18px;
            border: none;
            border-radius: 8px;
            font-size: 17px;
            width: 150px;
            font-family: 'Courier New', monospace;
            color: #2d3748;
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
        }
        .demo-controls button {
            background: #667eea; /* Blue button */
            color: white;
            border: none;
            padding: 12px 28px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 17px;
            transition: all 0.3s ease;
            font-weight: 600;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
            flex-shrink: 0; /* Prevent shrinking on small screens */
        }
        .demo-controls button:hover {
            background: #5a67d8; /* Darker blue on hover */
            transform: translateY(-2px); /* Slight lift effect */
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.2);
        }
        .temporal-visualization {
            background: rgba(255, 255, 255, 0.08); /* Slightly transparent background */
            border-radius: 10px;
            padding: 25px;
            margin-top: 25px;
            font-family: 'Courier New', monospace;
            min-height: 350px; /* Increased height */
            max-height: 500px; /* Max height with scroll */
            overflow-y: auto; /* Enable scrolling for many steps */
            color: #e2e8f0; /* Lighter text for output */
            width: 100%;
            box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.1);
            line-height: 1.6;
        }
        .temporal-step {
            margin: 10px 0;
            padding: 12px 18px;
            background: rgba(255, 255, 255, 0.03); /* Very subtle background for steps */
            border-radius: 8px;
            border-left: 4px solid transparent;
            opacity: 0;
            transform: translateY(15px); /* Slide up effect */
            transition: all 0.6s ease;
            font-size: 0.9em;
            display: flex;
            align-items: flex-start;
            gap: 10px;
        }
        .temporal-step strong {
            color: #81e6d9; /* Teal for time labels */
            flex-shrink: 0;
        }
        .temporal-step.active {
            opacity: 1;
            transform: translateY(0);
        }
        .temporal-step.init { border-left-color: #63b3ed; } /* Light blue for init */
        .temporal-step.domain { border-left-color: #5a67d8; } /* Indigo for domain */
        .temporal-step.sequence { border-left-color: #a78bfa; } /* Purple for sequence */
        .temporal-step.checking {
            border-left-color: #f6e05e; /* Yellow for checking */
            background: rgba(255, 240, 150, 0.1);
            color: #f6e05e; /* Yellow text */
        }
        .temporal-step.checking strong { color: #f6e05e; }
        .temporal-step.found-divisor {
            border-left-color: #f56565; /* Red for found divisor */
            background: rgba(255, 200, 200, 0.1);
            color: #f56565; /* Red text */
            font-weight: bold;
        }
        .temporal-step.found-divisor strong { color: #f56565; }
        .temporal-step.prime-confirmed {
            border-left-color: #48bb78; /* Green for prime confirmation */
            background: rgba(150, 255, 150, 0.1);
            color: #48bb78; /* Green text */
            font-weight: bold;
            font-size: 1em;
        }
        .temporal-step.prime-confirmed strong { color: #48bb78; }
        .temporal-step.not-prime {
            border-left-color: #e53e3e; /* Darker red for not prime */
            background: rgba(255, 180, 180, 0.1);
            color: #e53e3e; /* Darker red text */
            font-weight: bold;
            font-size: 1em;
        }
        .temporal-step.not-prime strong { color: #e53e3e; }
        .temporal-step.propagation {
            border-left-color: #81e6d9; /* Teal for propagation */
            background: rgba(150, 255, 255, 0.1);
            color: #81e6d9;
        }
        .temporal-step.propagation strong { color: #81e6d9; }

        .feedback-loop-diagram {
            background: #f7fafc; /* Light background for diagram */
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            padding: 30px;
            margin: 25px 0;
            text-align: center;
            overflow-x: auto; /* Allow horizontal scroll on small screens */
        }
        .feedback-loop-diagram h3 {
            color: #2d3748;
            margin-bottom: 20px;
            font-size: 1.5em;
            font-weight: 600;
        }
        .loop-container {
            display: flex;
            justify-content: center;
            align-items: center;
            flex-wrap: wrap; /* Allow wrapping on smaller screens */
            gap: 15px; /* Space between elements */
        }
        .loop-step {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background: #ebf4ff; /* Very light blue for steps */
            border: 2px solid #a7c0f1; /* Soft blue border */
            border-radius: 10px;
            padding: 15px 25px;
            text-align: center;
            min-width: 160px;
            height: 90px; /* Fixed height for consistency */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            font-size: 0.95em;
            color: #3f51b5; /* Blue text for steps */
            font-weight: 500;
        }
        .loop-arrow {
            font-size: 2em; /* Larger arrows */
            color: #6366f1; /* Indigo arrow color */
            margin: 0 10px;
            line-height: 1;
        }
        .emphasis {
            background: linear-gradient(135deg, #fffbee 0%, #fffbf0 100%); /* Soft yellow background */
            border-left: 5px solid #f6ad55; /* Warm amber border */
            padding: 20px;
            margin: 20px 0;
            border-radius: 0 10px 10px 0;
            font-style: italic;
            font-size: 1.05em;
            color: #8c5d2d; /* Brownish text */
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

        /* Message box for custom alerts (replaces native alert()) */
        #messageBox {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            border: 2px solid #6366f1; /* Indigo border */
            border-radius: 12px;
            padding: 30px 40px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.25);
            z-index: 1000;
            display: none; /* Hidden by default */
            flex-direction: column;
            align-items: center;
            gap: 20px;
            font-family: 'Inter', sans-serif;
            color: #2d3748;
            text-align: center;
            max-width: 90%;
        }
        #messageBox p {
            font-size: 1.1em;
            font-weight: 500;
        }
        #messageBox button {
            background: #6366f1; /* Indigo button */
            color: white;
            padding: 10px 25px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1em;
            transition: all 0.3s ease;
            box-shadow: 0 3px 8px rgba(0,0,0,0.1);
        }
        #messageBox button:hover {
            background: #5a67d8; /* Darker indigo on hover */
            transform: translateY(-1px);
        }

        /* Responsive adjustments for smaller screens */
        @media (max-width: 768px) {
            .container {
                padding: 20px;
                border-radius: 0; /* Remove border-radius on very small screens for full width */
                box-shadow: none;
            }
            body {
                padding: 0;
                align-items: flex-start;
            }
            .header {
                padding: 30px 20px;
                border-radius: 0;
            }
            .header h1 {
                font-size: 2em;
            }
            .header .abstract {
                padding: 15px;
            }
            .section {
                padding: 25px 20px;
            }
            .section h2 {
                font-size: 1.6em;
            }
            .demo-controls {
                flex-direction: column;
                gap: 15px;
            }
            .demo-controls input, .demo-controls button {
                width: 100%;
                max-width: 250px; /* Constrain width even when full-width */
            }
            .loop-container {
                flex-direction: column; /* Stack loop steps vertically */
                gap: 10px;
            }
            .loop-step {
                width: 100%;
                max-width: 200px;
                height: auto; /* Auto height for stacked steps */
                padding: 12px 15px;
            }
            .loop-arrow {
                transform: rotate(90deg); /* Rotate arrow for vertical flow */
                margin: 5px 0;
            }
            .equation-block {
                padding: 20px;
            }
        }

        /* Fade-in animation for sections */
        .fade-in {
            animation: fadeIn 0.8s ease-out forwards; /* 'forwards' keeps the end state */
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(25px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header Section -->
        <div class="header fade-in">
            <h1>Temporal Verification of Prime Numbers: A Computational Perspective</h1>
            <div class="subtitle">Exploring the Inseparable Role of Time in Determining Primality</div>
            <div class="abstract">
                <strong>Abstract:</strong> This analysis explores the computational and epistemological aspects of prime numbers, arguing that their verification and, by extension, our understanding of their primality, are inherently tied to temporal processes. We distinguish between the timeless mathematical existence of primes and the sequential, time-bound methods required for their discovery and confirmation, thereby creating an inseparable link between computational truth and temporal iteration.
            </div>
        </div>

        <!-- Section I: The Temporal Binding Thesis -->
        <div class="section fade-in">
            <h2>I. The Temporal Verification Thesis</h2>
            <p>While mathematical constructs are often conceived as existing in a Platonic realm of eternal truths, their *verification* and *discovery* by any computational process are fundamentally bound to temporal iteration. This binding is not merely a computational convenience but represents an <strong>epistemological necessity</strong> &mdash; the very act of establishing and confirming the identity of these constructs unfolds over time.</p>
            <div class="insight-box">
                <h4>Insight: Verification as a Temporal Process</h4>
                <p>The process of verifying whether a number is prime, by its very nature, requires a sequential, time-indexed exploration of potential divisors. This temporal process is how we establish the truth of primality in practice.</p>
            </div>
        </div>

        <!-- Section II: The Definition and Sequential Checks -->
        <div class="section theorem fade-in">
            <h2>II. The Definition and Sequential Checks</h2>
            <p>Consider the standard definition of primality:</p>
            <div class="equation-block">
                <div class="equation-label">Classical Definition of Primality</div>
                $$p \in \mathbb{N}, \quad p > 1 \quad \text{is prime} \iff \forall d \in \mathbb{N}, \, 1 < d < p \implies d \nmid p$$
            </div>
            <p>This definition asserts a timeless truth about a number $p$. However, the practical act of confirming this truth for any given $p$ involves checking potential divisors $d$ *in sequence*. The "for all" ($\forall$) quantifier, while mathematically abstract, implies a comprehensive check that, when implemented, unfolds over time.</p>
            <div class="emphasis">
                The definition "not divisible by any number between 1 and itself" necessitates checking each potential divisor. This checking process, when performed, establishes temporal precedence as fundamental to our confirmation of primality.
            </div>
            <div class="theorem-box">
                <h4>Observation: Temporal Evaluation of Primality Condition</h4>
                <p>Let $\mathcal{D}(p) = \{d \in \mathbb{N} : 1 < d \le \lfloor \sqrt{p} \rfloor \}$ be the set of minimal potential divisors to check. The computational evaluation of the primality condition requires a series of operations $t_1, t_2, \ldots, t_{|\mathcal{D}(p)|}$ where each $t_i$ corresponds to testing divisor $d_i$. Our *determination* of the primality verdict $P(p)$ is confirmed upon the completion of these temporal steps.</p>
            </div>
        </div>

        <!-- Section III: The Iterative Feedback Loop Structure -->
        <div class="section critical fade-in">
            <h2>III. The Computational Verification Loop</h2>
            <p>Our confirmation of prime numbers emerges from an iterative computational loop. Each candidate number's primality is assessed by testing against a sequence of divisors, creating a chain of computational dependencies.</p>
            <div class="feedback-loop-diagram">
                <h3>Computational Verification Flow for Primality</h3>
                <div class="loop-container">
                    <div class="loop-step">Candidate Number<br>$(n)$</div>
                    <span class="loop-arrow">→</span>
                    <div class="loop-step">Select Divisor<br>$(d = 2, \ldots, \lfloor \sqrt{n} \rfloor)$</div>
                    <span class="loop-arrow">→</span>
                    <div class="loop-step">Test Divisibility<br>$(n \pmod d = 0?)$</div>
                    <span class="loop-arrow">→</span>
                    <div class="loop-step">Result & Decide<br>(Composite/Continue)</div>
                    <span class="loop-arrow">→</span>
                    <div class="loop-step">Conclude Primality<br>(No divisors found)</div>
                </div>
            </div>
            <h3>Propagation of Knowledge</h3>
            <p>The confirmed primality (or compositeness) of any value $n$ has direct implications for the primality assessment of future values. If $n$ is composite due to a divisor $d$, this knowledge is instantly available to avoid redundant checks for $n$. If $n$ is prime, then $n$ itself becomes a building block for identifying larger composite numbers. This creates a cascade where:</p>
            <div class="equation-block">
                <div class="equation-label">Propagation of Compositeness Knowledge</div>
                $$\mathcal{K}(n, t) = \{m \in \mathbb{N} : m > n \land n \mid m \land \text{knowledge established at time } t\}$$
                <p style="margin-top: 10px; font-size: 0.9em;">Where $t$ is the temporal moment when the compositeness of $n$ (via a divisor) is determined.</p>
            </div>
        </div>

        <!-- Section IV: Formalization of Temporal Verification -->
        <div class="section fade-in">
            <h2>IV. Formalizing Temporal Verification</h2>
            <p>The verification process can be formalized as a temporal algorithm with explicit time-binding for its execution:</p>
            <div class="equation-block">
                <div class="equation-label">Divisibility Check at Temporal Step $t$</div>
                $$D(p, d_t) = \begin{cases} 1 & \text{if } d_t \text{ divides } p \text{ (checked at temporal step } t) \\ 0 & \text{otherwise} \end{cases}$$
                <p style="margin-top: 10px;">Here, $d_t$ refers to the divisor being tested at a specific temporal step $t$.</p>
            </div>
            <div class="equation-block">
                <div class="equation-label">Cumulative Divisibility Evidence (Logical OR)</div>
                $$C(p, T) = \bigvee_{t=1}^T D(p, d_t)$$
                <p style="margin-top: 10px;">The logical OR accumulates evidence: if $C(p, T) = 1$, a divisor has been found up to temporal step $T$.</p>
            </div>
            <div class="equation-block">
                <div class="equation-label">Computationally Confirmed Primality</div>
                $$\text{IsPrime}(p) = \neg C\left(p, \text{max_temporal_step}\right)$$
                <p style="margin-top: 10px;">Primality is computationally confirmed if no divisor is found after completing all necessary temporal steps up to $\lfloor \sqrt{p} \rfloor$.</p>
            </div>
        </div>

        <!-- Interactive Demo -->
        <div class="interactive-demo">
            <div class="demo-header">
                <h2>Interactive Temporal Verification Analysis</h2>
                <p>Observe how the determination of primality unfolds through a sequential, temporal process. Each step builds upon previous checks, demonstrating the inseparable binding between computational truth and temporal flow.</p>
            </div>
            <div class="demo-controls">
                <input type="number" id="numberInput" value="29" min="2" max="1000">
                <button onclick="startTemporalAnalysis()">Begin Temporal Analysis</button>
                <button onclick="resetAnalysis()">Reset Analysis</button>
            </div>
            <!-- Message box for user feedback (replaces native alert) -->
            <div id="messageBox" class="hidden">
                <p id="messageText"></p>
                <button onclick="hideMessageBox()">OK</button>
            </div>
            <div class="temporal-visualization" id="temporalDisplay">
                <div style="text-align: center; opacity: 0.7; margin-top: 100px;">
                    Initiate temporal analysis to observe the computational emergence of primality through sequential verification.
                </div>
            </div>
        </div>

        <!-- Section V: The Impossibility of Instantaneous Verification -->
        <div class="section critical fade-in">
            <h2>V. The Impossibility of Instantaneous Verification</h2>
            <p>Any hypothetical system that attempts to assess primality through a purely simultaneous, non-temporal verification (checking all divisors at once) faces fundamental computational limitations:</p>
            <div class="equation-block">
                <div class="equation-label">Idealized Non-Temporal Verification (Computationally Impractical)</div>
                $$\hat{P}(p) = \bigwedge_{d=2}^{\lfloor \sqrt{p} \rfloor} \neg (d \mid p)$$
            </div>
            <div class="insight-box">
                <h4>Computational Impracticality</h4>
                <p>Even for finite $p$, the "simultaneous" evaluation of all divisibility checks for a large $p$ is not physically realizable. A true instantaneous computation would imply overcoming the sequential nature of computation and information processing.</p>
            </div>
            <p>Consequently, while primality is a timeless property, its *confirmation* or *discovery* is intrinsically linked to time-indexed, sequential verification processes. The concept remains coherent, but its computational access is temporal.</p>
        </div>

        <!-- Section VI: Philosophical Implications and Conclusions -->
        <div class="section theorem fade-in">
            <h2>VI. Philosophical Implications and Conclusions</h2>
            <p>This analysis reveals that while mathematical constructs possess inherent properties, their full characterization and verification within our computational framework are <strong>temporally bound processes</strong>. The implications extend beyond prime numbers:</p>
            <div class="theorem-box">
                <h4>Thesis: Computational Truth and Temporal Verification</h4>
                <p>For any mathematical property $\mathcal{P}$ defined via exhaustive verification over an ordered domain, the establishment of the property's truth value occurs through a temporal process of iteration. Our computational understanding of such properties relies on these sequential checks.</p>
            </div>
            <p>The pursuit of temporal decoupling mechanisms &mdash; methods to ascertain properties outside the dimension of time &mdash; represents a significant challenge for computability. Our access to mathematical truth, especially for properties requiring verification, is often mediated by time.</p>
            <div class="emphasis">
                <strong>Conclusion:</strong> Primality is an intrinsic mathematical property whose *computational confirmation* is a time-indexed process. This highlights that while mathematical truths may be eternal, our methods of discovering and confirming them are fundamentally sequential and temporal, embodying the principle that time is an enabling condition for our engagement with mathematical reality.
            </div>
        </div>
        
        <!-- Section VII: Causality, Time, and the Framework of Reality -->
        <div class="section critical fade-in">
            <h2>VII. Causality, Time, and the Framework of Reality</h2>
            <p>Extending beyond the realm of mathematical constructs like prime numbers, we can conceptualize all systems in reality as feedback loops of causality. In this framework, <strong>time</strong> serves as the indexer of causal sequences, marking the progression of events and interactions. Simultaneously, <strong>space</strong> holds the positional data, embedding temporal progression within a structural context.</p>
            <div class="insight-box">
                <h4>Insight: Time and Space as Fundamental Constructs</h4>
                <p>Time embeds causality, providing a sequential order to events, while space offers the dimensional framework where these events are positioned. Together, they form the fabric through which we perceive and interpret reality.</p>
            </div>
            <p>This causality framework, operating over time, generates complexity and chaos at a mass scale of interrelatedness, emerging from basic rules. The intricate web of interactions, driven by simple principles, results in unpredictable and complex behaviors across systems.</p>
            <div class="theorem-box">
                <h4>Thesis: Chaos from Basic Rules</h4>
                <p>From the simplest rules of interaction, governed by causality indexed by time, emerges a chaotic interrelatedness. This chaos is not randomness but a profound complexity born from iterative feedback loops across temporal and spatial dimensions.</p>
            </div>
            <p>Importantly, when we consider systems like primality, we are not merely observing inherent rules of mathematics. Instead, we are viewing reality through the lens of our comprehension. Our understanding of primality, causality, and chaos is filtered through the rules and limitations of human perception and cognitive frameworks.</p>
            <div class="emphasis">
                <strong>Reflection:</strong> Our engagement with concepts like prime numbers or the broader systems of reality is shaped by the rules of our comprehension. This suggests that what we perceive as objective truths may be interpretations bounded by the temporal and spatial constructs of our consciousness.
            </div>
        </div>
    </div>

    <!-- JavaScript for interactive demo and animations -->
    <script>
        let isAnalyzing = false; // Flag to prevent multiple analyses at once

        // Function to show a custom message box
        function showMessageBox(message) {
            const messageBox = document.getElementById('messageBox');
            const messageText = document.getElementById('messageText');
            messageText.textContent = message;
            messageBox.style.display = 'flex'; // Show the message box
            messageBox.classList.add('fade-in'); // Apply fade-in animation
        }

        // Function to hide the custom message box
        function hideMessageBox() {
            const messageBox = document.getElementById('messageBox');
            // Remove fade-in class and hide after animation (optional, but good for sequential animations)
            messageBox.classList.remove('fade-in');
            messageBox.style.display = 'none'; // Hide the message box
        }

        /**
         * Generates an array of temporal steps for prime number verification.
         * Each step describes an action in the verification process.
         * @param {number} n - The number to analyze for primality.
         * @returns {Array<Object>} An array of step objects, each with text, type, and time.
         */
        function generateTemporalSteps(n) {
            const steps = [];
            const sqrtN = Math.floor(Math.sqrt(n));

            // Initial steps
            steps.push({
                text: `Initiating temporal analysis for candidate $p = ${n}$`,
                type: 'init',
                time: 't₀'
            });
            steps.push({
                text: `Establishing computational domain: Potential divisors $d \\in \\mathbb{N} : 1 < d \\le \\lfloor \\sqrt{${n}} \\rfloor = ${sqrtN}$`,
                type: 'domain',
                time: 't₁'
            });
            steps.push({
                text: `Beginning iterative divisibility checks through temporal sequence...`,
                type: 'sequence',
                time: 't₂'
            });

            let temporalIndex = 3; // Starting temporal index for divisor checks
            let foundDivisor = false;

            // Iterate through potential divisors
            for (let d = 2; d <= sqrtN; d++) {
                // Check if n is divisible by d
                if (n % d === 0) {
                    steps.push({
                        text: `t₍${temporalIndex}₎: Testing divisor $d = ${d}$ for ${n}$: $${n} \\pmod{${d}} = 0$ $\\rightarrow$ DIVISOR FOUND!`,
                        type: 'found-divisor',
                        time: `t₍${temporalIndex}₎`
                    });
                    steps.push({
                        text: `Computational verification complete: ${n}$ is composite, as $${n} = ${d} \\times ${n/d}$.`,
                        type: 'not-prime',
                        time: `t₍${temporalIndex + 1}₎`
                    });
                    steps.push({
                        text: `Knowledge propagated to future states: Multiples of ${d}$ are known to be composite.`,
                        type: 'propagation',
                        time: `t₍${temporalIndex + 2}₎`
                    });
                    foundDivisor = true;
                    break; // Stop at the first divisor found
                } else {
                    steps.push({
                        text: `t₍${temporalIndex}₎: Testing divisor $d = ${d}$ for ${n}$: $${n} \\pmod{${d}} \\neq 0$ $\\checkmark$ (No divisor found)`,
                        type: 'checking',
                        time: `t₍${temporalIndex}₎`
                    });
                }
                temporalIndex++;
            }

            // If loop completes without finding a divisor, the number is prime
            if (!foundDivisor) {
                steps.push({
                    text: `Temporal verification sequence complete: No divisors found within the computational domain.`,
                    type: 'complete',
                    time: `t₍${temporalIndex}₎`
                });
                steps.push({
                    text: `COMPUTATIONAL CONFIRMATION: $p = ${n}$ is confirmed PRIME.`,
                    type: 'prime-confirmed',
                    time: `t₍${temporalIndex + 1}₎`
                });
                steps.push({
                    text: `The primality of ${n}$ now informs future primality checks.`,
                    type: 'propagation',
                    time: `t₍${temporalIndex + 2}₎`
                });
            }

            return steps;
        }

        /**
         * Starts the temporal analysis simulation.
         */
        async function startTemporalAnalysis() {
            if (isAnalyzing) return; // Prevent re-triggering analysis

            const n = parseInt(document.getElementById('numberInput').value);

            // Input validation
            if (isNaN(n) || n < 2 || n > 1000) {
                showMessageBox('Please enter a whole number between 2 and 1000 for analysis.');
                return;
            }

            isAnalyzing = true;
            const steps = generateTemporalSteps(n);
            
            const display = document.getElementById('temporalDisplay');
            display.innerHTML = ''; // Clear previous results

            // Iterate through the generated steps and display them with a delay
            for (let i = 0; i < steps.length; i++) {
                // Introduce a delay for visual effect
                await new Promise(resolve => setTimeout(resolve, 1200));

                const stepDiv = document.createElement('div');
                stepDiv.className = `temporal-step ${steps[i].type}`;
                // Using innerHTML directly for MathJax to process LaTeX content
                stepDiv.innerHTML = `<strong>${steps[i].time}:</strong> ${steps[i].text}`; 

                display.appendChild(stepDiv);

                // Add active class after a slight delay for fade-in effect
                setTimeout(() => {
                    stepDiv.classList.add('active');
                }, 100);

                // Scroll to the bottom to show new steps
                display.scrollTop = display.scrollHeight;

                // Re-render MathJax for newly added content.
                if (typeof MathJax !== 'undefined' && typeof MathJax.typesetPromise !== 'undefined') {
                    MathJax.typesetPromise([stepDiv]).catch(function (err) {
                        console.error("MathJax typesetting failed:", err);
                    });
                }
            }

            isAnalyzing = false;
        }

        /**
         * Resets the interactive analysis display.
         */
        function resetAnalysis() {
            if (isAnalyzing) return; // Prevent resetting while analysis is in progress

            const display = document.getElementById('temporalDisplay');
            display.innerHTML = `
                <div style="text-align: center; opacity: 0.7; margin-top: 100px;">
                    Initiate temporal analysis to observe the computational emergence of primality through sequential verification.
                </div>
            `;
            // Ensure MathJax re-renders this initial message if it contains LaTeX
            if (typeof MathJax !== 'undefined' && typeof MathJax.typesetPromise !== 'undefined') {
                MathJax.typesetPromise([display]).catch(function (err) {
                    console.error("MathJax typesetting failed on reset:", err);
                });
            }
        }

        // Intersection observer for fade-in animations on sections
        const observerOptions = {
            threshold: 0.1, // Trigger when 10% of the element is visible
            rootMargin: '0px 0px -50px 0px' // Start animation 50px before entering viewport
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('fade-in'); // Add fade-in class
                    observer.unobserve(entry.target); // Stop observing once animated
                }
            });
        }, observerOptions);

        // Attach observer to relevant elements when the DOM is fully loaded
        document.addEventListener('DOMContentLoaded', () => {
            // Select all relevant elements for animation, initially set opacity to 0 in CSS
            const elements = document.querySelectorAll('.header, .section, .interactive-demo');
            elements.forEach(el => {
                // Ensure elements are initially hidden or have animation properties set in CSS
                el.style.opacity = '0'; // Explicitly hide before observing
                observer.observe(el);
            });
        });
    </script>
</body>
</html>
